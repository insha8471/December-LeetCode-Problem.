                   //"JAVA" 

//Approach-1 (Using Brute Force) - ACCEPTED
//T.C : O(n^2)
//S.C : O(1)
public class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        int result = -1;
        int n = s.length();

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (s.charAt(i) == s.charAt(j)) {
                    result = Math.max(result, j - i - 1);
                }
            }
        }

        return result;
    }
}

    **********************************
//Approach - 2 optimal
//T.C : O(n)
//S.C : O(n)
class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        Map<Character, Integer> lastOcurr = new HashMap<>();
        int maxLen = -1;
        for(int i=0;i<s.length();i++){
            char c = s.charAt(i);
            
            if(lastOcurr.containsKey(c)){
                maxLen = Math.max(maxLen, i-lastOcurr.get(c)-1);
            }else{
                lastOcurr.put(c, i);
            }
        }
        return maxLen;
    }
}

       *******************************

//Approach-3 (Using integer array instead of map)
//T.C : O(n)
//S.C : O(26) ~ O(1)
public class Solution {
    public int maxLengthBetweenEqualCharacters(String s) {
        int n = s.length();
        int[] count = new int[26];
        Arrays.fill(count, -1);

        int result = -1;

        for (int i = 0; i < n; i++) {
            char ch = s.charAt(i);

            if (count[ch - 'a'] == -1) {
                count[ch - 'a'] = i;
            } else {
                result = Math.max(result, i - count[ch - 'a'] - 1);
            }
        }

        return result;
    }
}
