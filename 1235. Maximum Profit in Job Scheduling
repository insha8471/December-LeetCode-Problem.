//Approach (Recursion + memoisation)
//T.c : O(Nlog(N)) - where N is the no of Jobs and log(n) is binary search
//S.c : O(N) - where N is the no of Jobs

class Solution {
    private int[] memo;
    private int n;
    public int nextJob(int[][] arr, int l , int endJob){ // binary search
        int r = n-1;
        int result = n+1;
        while(l <= r){
            int mid = l + (r-l)/2;

            if(arr[mid][0] >= endJob){
                result = mid;
                r = mid - 1;  
            }else{
                l = mid+1;
            }
        }
        return result;
    }
    public int solve(int[][] arr, int i){
        if(i >= n) return 0;

        if(memo[i] != -1)
            return memo[i];
        int next = nextJob(arr, i+1, arr[i][1]); //(arr , next job start index, first job end time....)

        int taken = arr[i][2] + solve(arr, next);
        int notTaken = solve(arr, i+1);

        return memo[i] = Math.max(taken, notTaken);
    }

    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        n = startTime.length;
        memo = new int[n];
        Arrays.fill(memo, -1);
        int[][] arr = new int[n][3]; //store the sart time, End time , profit...

        for(int i=0;i<n;i++){
            arr[i][0] = startTime[i];
            arr[i][1] = endTime[i];
            arr[i][2] = profit[i];
        }
        
        Arrays.sort(arr, Comparator.comparingInt(a -> a[0]));

        return solve(arr, 0); //index
    }
}
