// Approach-01 - (Brute Approach)
//T.c : O(N*M)
//S.c : O(N)

class Solution {
    public int numberOfBeams(String[] bank) {
        ArrayList<Integer> ls = new ArrayList<>();
        for(String x : bank){
            int count = 0;
            for(int i=0;i<x.length();i++){
                if(x.charAt(i) == '1'){
                    count++;
                }
            }
            if(count > 0)
                ls.add(count);
        }
        int laserBeam = 0;
        for(int i=0;i<ls.size();i++){
            if(i<ls.size()-1)
                laserBeam += ls.get(i)*ls.get(i+1);
        }
        return laserBeam;
    }
}

**********************************************************************************************************************

// Approach-02 - (Optimal Approach)
//T.c : O(N*M)
//S.c : O(1)


class Solution {
    public int numberOfBeams(String[] bank) {
        int result = 0;
        int prevBcount = 0;
        for(String x : bank){
            int currBcount = 0;
            for(int i=0;i<x.length();i++){
                if(x.charAt(i) == '1') currBcount++;
            }
            result += (prevBcount * currBcount);

            if(currBcount != 0)
                prevBcount = currBcount;
        }
        return result;
    }
}

